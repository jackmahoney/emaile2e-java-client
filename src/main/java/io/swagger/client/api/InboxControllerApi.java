/*
 * Emaile2e API Documentation
 * [Emaile2e](http://www.emaile2e.com) provides a simple REST API that lets you create randomized email addresses and fetch the emails sent to them.  ## Why? If your application uses emails at any point, Emaile2e makes testing your app's email integration easier.  Say your app sign-up process sends a verification email. During e2e tests you can create a new random email  address for a test user, sign-up, and then fetch the verification email and use the verification code in the next steps of your test.  ## Getting started Every API request requires a valid API Key appended as a query parameter. **To obtain an API Key** [visit your account dashboard](http://www.emaile2e.com/dashboard).    The general flow is as follows:  1. Create a new inbox during a test. The email address will be returned in the response.  2. Send an email to that address or trigger an action in your test that does so. 3. Fetch the email for your new inbox and check if their content is what you expected.  ## SDK - There is an official [Javascript SDK](https://www.npmjs.com/package/emaile2e-client) available on npm. - You can also use the [swagger JSON definition](https://api.emaile2e.com/v2/api-docs) and [swagger-codegen](https://github.com/swagger-api/swagger-codegen) to generate a swagger client in a language of your choice.  ## Legal The Emaile2e API code is owned by [PettmanUG](http://pettmanug.site) and uses a proprietary [software licence](http://www.binpress.com/license/view/l/c8376a01eca7465027a978d3fde5a1e2). The SDKs are free to use in any project and have an ISC licence.  ## Bugs, features, support To report bugs or request features please see the [contact page](http://www.emaile2e.com/contact). For help see [support](http://www.emaile2e.com/support).
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.joda.time.DateTime;
import io.swagger.client.model.ResponseInboxDto;
import io.swagger.client.model.ResponseListEmailDto;
import io.swagger.client.model.ResponseListInboxDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboxControllerApi {
    private ApiClient apiClient;

    public InboxControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboxControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createUsingPOST
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createUsingPOSTCall(String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "apiKey", apiKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createUsingPOSTValidateBeforeCall(String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling createUsingPOST(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createUsingPOSTCall(apiKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an inbox
     * Create a new random inbox and return the id and email address for it. Send emails to this address and they will be stored for this inbox.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @return ResponseInboxDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseInboxDto createUsingPOST(String apiKey) throws ApiException {
        ApiResponse<ResponseInboxDto> resp = createUsingPOSTWithHttpInfo(apiKey);
        return resp.getData();
    }

    /**
     * Create an inbox
     * Create a new random inbox and return the id and email address for it. Send emails to this address and they will be stored for this inbox.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @return ApiResponse&lt;ResponseInboxDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseInboxDto> createUsingPOSTWithHttpInfo(String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = createUsingPOSTValidateBeforeCall(apiKey, null, null);
        Type localVarReturnType = new TypeToken<ResponseInboxDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an inbox (asynchronously)
     * Create a new random inbox and return the id and email address for it. Send emails to this address and they will be stored for this inbox.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createUsingPOSTAsync(String apiKey, final ApiCallback<ResponseInboxDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createUsingPOSTValidateBeforeCall(apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseInboxDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for indexUsingGET
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call indexUsingGETCall(String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "apiKey", apiKey));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call indexUsingGETValidateBeforeCall(String apiKey, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling indexUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = indexUsingGETCall(apiKey, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List your inboxes
     * Return a list of your inboxes. Each inbox has a uuid and an email address. Emails sent to the email address are stored in the inbox and can be fetched via &#x60;/inboxes/{uuid}&#x60;.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @return ResponseListInboxDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseListInboxDto indexUsingGET(String apiKey) throws ApiException {
        ApiResponse<ResponseListInboxDto> resp = indexUsingGETWithHttpInfo(apiKey);
        return resp.getData();
    }

    /**
     * List your inboxes
     * Return a list of your inboxes. Each inbox has a uuid and an email address. Emails sent to the email address are stored in the inbox and can be fetched via &#x60;/inboxes/{uuid}&#x60;.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @return ApiResponse&lt;ResponseListInboxDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseListInboxDto> indexUsingGETWithHttpInfo(String apiKey) throws ApiException {
        com.squareup.okhttp.Call call = indexUsingGETValidateBeforeCall(apiKey, null, null);
        Type localVarReturnType = new TypeToken<ResponseListInboxDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List your inboxes (asynchronously)
     * Return a list of your inboxes. Each inbox has a uuid and an email address. Emails sent to the email address are stored in the inbox and can be fetched via &#x60;/inboxes/{uuid}&#x60;.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call indexUsingGETAsync(String apiKey, final ApiCallback<ResponseListInboxDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = indexUsingGETValidateBeforeCall(apiKey, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseListInboxDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for viewUsingGET
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @param uuid The inbox&#39;s id. (required)
     * @param waitFor Wait a maximum of 30 seconds for atleast this many emails in an inbox before returning a result. (optional)
     * @param since Filter for emails received on or after this ISO8601 LocalDateTime. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call viewUsingGETCall(String apiKey, String uuid, Integer waitFor, DateTime since, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/inboxes/{uuid}"
            .replaceAll("\\{" + "uuid" + "\\}", apiClient.escapeString(uuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (apiKey != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "apiKey", apiKey));
        if (waitFor != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "waitFor", waitFor));
        if (since != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "since", since));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call viewUsingGETValidateBeforeCall(String apiKey, String uuid, Integer waitFor, DateTime since, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling viewUsingGET(Async)");
        }
        
        // verify the required parameter 'uuid' is set
        if (uuid == null) {
            throw new ApiException("Missing the required parameter 'uuid' when calling viewUsingGET(Async)");
        }
        
        
        com.squareup.okhttp.Call call = viewUsingGETCall(apiKey, uuid, waitFor, since, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Fetch emails for a given inbox
     * Return a list of emails stored in a given inbox. Each email contains various properties including the email body (in eml format), subject, and sender. The &#x60;since&#x60; parameter is a ISO8601 LocalDateTime that will filter for emails received on or after the given DateTime. Note that because an inbox may take 5 to 10 seconds to receive an email, you can use the &#x60;waitFor&#x60; parameter to hold a request open until the desired number of emails is present. If this number is not met after 30 seconds, an error will be returned.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @param uuid The inbox&#39;s id. (required)
     * @param waitFor Wait a maximum of 30 seconds for atleast this many emails in an inbox before returning a result. (optional)
     * @param since Filter for emails received on or after this ISO8601 LocalDateTime. (optional)
     * @return ResponseListEmailDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ResponseListEmailDto viewUsingGET(String apiKey, String uuid, Integer waitFor, DateTime since) throws ApiException {
        ApiResponse<ResponseListEmailDto> resp = viewUsingGETWithHttpInfo(apiKey, uuid, waitFor, since);
        return resp.getData();
    }

    /**
     * Fetch emails for a given inbox
     * Return a list of emails stored in a given inbox. Each email contains various properties including the email body (in eml format), subject, and sender. The &#x60;since&#x60; parameter is a ISO8601 LocalDateTime that will filter for emails received on or after the given DateTime. Note that because an inbox may take 5 to 10 seconds to receive an email, you can use the &#x60;waitFor&#x60; parameter to hold a request open until the desired number of emails is present. If this number is not met after 30 seconds, an error will be returned.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @param uuid The inbox&#39;s id. (required)
     * @param waitFor Wait a maximum of 30 seconds for atleast this many emails in an inbox before returning a result. (optional)
     * @param since Filter for emails received on or after this ISO8601 LocalDateTime. (optional)
     * @return ApiResponse&lt;ResponseListEmailDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ResponseListEmailDto> viewUsingGETWithHttpInfo(String apiKey, String uuid, Integer waitFor, DateTime since) throws ApiException {
        com.squareup.okhttp.Call call = viewUsingGETValidateBeforeCall(apiKey, uuid, waitFor, since, null, null);
        Type localVarReturnType = new TypeToken<ResponseListEmailDto>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch emails for a given inbox (asynchronously)
     * Return a list of emails stored in a given inbox. Each email contains various properties including the email body (in eml format), subject, and sender. The &#x60;since&#x60; parameter is a ISO8601 LocalDateTime that will filter for emails received on or after the given DateTime. Note that because an inbox may take 5 to 10 seconds to receive an email, you can use the &#x60;waitFor&#x60; parameter to hold a request open until the desired number of emails is present. If this number is not met after 30 seconds, an error will be returned.
     * @param apiKey Your API Key. Sign up and find it in your dashboard. (required)
     * @param uuid The inbox&#39;s id. (required)
     * @param waitFor Wait a maximum of 30 seconds for atleast this many emails in an inbox before returning a result. (optional)
     * @param since Filter for emails received on or after this ISO8601 LocalDateTime. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call viewUsingGETAsync(String apiKey, String uuid, Integer waitFor, DateTime since, final ApiCallback<ResponseListEmailDto> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = viewUsingGETValidateBeforeCall(apiKey, uuid, waitFor, since, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ResponseListEmailDto>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
