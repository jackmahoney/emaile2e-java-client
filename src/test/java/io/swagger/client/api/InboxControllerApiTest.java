/*
 * Emaile2e API Documentation
 * [Emaile2e](http://www.emaile2e.com) provides a simple REST API that lets you create randomized email addresses and fetch the emails sent to them.  ## Why? If your application uses emails at any point, Emaile2e makes testing your app's email integration easier.  Say your app sign-up process sends a verification email. During e2e tests you can create a new random email  address for a test user, sign-up, and then fetch the verification email and use the verification code in the next steps of your test.  ## Getting started Every API request requires a valid API Key appended as a query parameter. **To obtain an API Key** [visit your account dashboard](http://www.emaile2e.com/dashboard).    The general flow is as follows:  1. Create a new inbox during a test. The email address will be returned in the response.  2. Send an email to that address or trigger an action in your test that does so. 3. Fetch the email for your new inbox and check if their content is what you expected.  ## SDK - There is an official [Javascript SDK](https://www.npmjs.com/package/emaile2e-client) available on npm. - You can also use the [swagger JSON definition](https://api.emaile2e.com/v2/api-docs) and [swagger-codegen](https://github.com/swagger-api/swagger-codegen) to generate a swagger client in a language of your choice.  ## Legal The Emaile2e API code is owned by [PettmanUG](http://pettmanug.site) and uses a proprietary [software licence](http://www.binpress.com/license/view/l/c8376a01eca7465027a978d3fde5a1e2). The SDKs are free to use in any project and have an ISC licence.  ## Bugs, features, support To report bugs or request features please see the [contact page](http://www.emaile2e.com/contact). For help see [support](http://www.emaile2e.com/support).
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import org.joda.time.DateTime;
import io.swagger.client.model.ResponseInboxDto;
import io.swagger.client.model.ResponseListEmailDto;
import io.swagger.client.model.ResponseListInboxDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboxControllerApi
 */
@Ignore
public class InboxControllerApiTest {

    private final InboxControllerApi api = new InboxControllerApi();

    
    /**
     * Create an inbox
     *
     * Create a new random inbox and return the id and email address for it. Send emails to this address and they will be stored for this inbox.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUsingPOSTTest() throws ApiException {
        String apiKey = null;
        ResponseInboxDto response = api.createUsingPOST(apiKey);

        // TODO: test validations
    }
    
    /**
     * List your inboxes
     *
     * Return a list of your inboxes. Each inbox has a uuid and an email address. Emails sent to the email address are stored in the inbox and can be fetched via &#x60;/inboxes/{uuid}&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void indexUsingGETTest() throws ApiException {
        String apiKey = null;
        ResponseListInboxDto response = api.indexUsingGET(apiKey);

        // TODO: test validations
    }
    
    /**
     * Fetch emails for a given inbox
     *
     * Return a list of emails stored in a given inbox. Each email contains various properties including the email body (in eml format), subject, and sender. The &#x60;since&#x60; parameter is a ISO8601 LocalDateTime that will filter for emails received on or after the given DateTime. Note that because an inbox may take 5 to 10 seconds to receive an email, you can use the &#x60;waitFor&#x60; parameter to hold a request open until the desired number of emails is present. If this number is not met after 30 seconds, an error will be returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void viewUsingGETTest() throws ApiException {
        String apiKey = null;
        String uuid = null;
        Integer waitFor = null;
        DateTime since = null;
        ResponseListEmailDto response = api.viewUsingGET(apiKey, uuid, waitFor, since);

        // TODO: test validations
    }
    
}
